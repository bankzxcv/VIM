set hlsearch
set incsearch
set nocompatible     
let mapleader = ","

" be iMproved, required
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'jiangmiao/auto-pairs'
Plugin 'davidhalter/jedi-vim'
Plugin 'ternjs/tern_for_vim'
Plugin 'fatih/vim-go'
Plugin 'ctrlp.vim'
Plugin 'maksimr/vim-jsbeautify'
Plugin 'scrooloose/nerdtree'
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/syntastic' "for EsLint 
Plugin 'millermedeiros/vim-esformatter' "for EsFormatter
Plugin 'Chiel92/vim-autoformat'
Plugin 'tpope/vim-surround'
call vundle#end()            " required

" Run C++
map <F9> :w <CR> :!clear && c++ % -std=c++11<CR>
map <F10> :w <CR> :!clear && c++ % -o %< -std=c++11 && ./%< <CR>

" No swp, no backup
set nobackup
set noswapfile

" Enable Rai Mai Ru
filetype on
filetype plugin indent on
" Enable Clipboard
" set clipboard=unnamed
" Copy to clipboard
vnoremap <silent> <leader>y :<CR>:let @a=@" \| execute "normal! vgvy" \| let res=system("pbcopy", @") \| let @"=@a<CR>

" Plugin Fuzzy Search
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'

" Disable Scrath Preview
set completeopt-=preview
" Enable Syntax on
syntax on

" Auto Read
set autoread

" Enable Line Number
set number

" Hilight Current Line
set cursorline

" Show status and line number
set laststatus=2
set statusline=%f "tail of the filename
set statusline+=:%l

" Set Matchmaker
let g:matchmaker_enable_startup = 1

" SET Tab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" ignore case sensitive
set ignorecase

" " General
set background=dark
set mouse=a
scriptencoding utf-8
set backspace=indent,eol,start

" NERD TREE
map <C-e> :NERDTreeToggle<CR>

" Hg / GIT Blame
vmap <Leader>h :<C-U>!hg blame -fnu <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>
vmap <Leader>g :<C-U>!git blame -fnu <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>

" Auto Format
let g:formatterpath = ['/usr/local/Cellar/llvm/4.0.0_1/bin','/usr/local/go/bin/']
let g:formatdef_my_cpp = '"clang-format -style=google"'
let g:formatters_cpp = ['my_cpp']
let g:formatter_yapf_style = 'google'
let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
let g:ycm_python_binary_path = '/usr/local/bin/python3'
let g:ycm_server_python_interpreter = '/usr/local/bin/python3'
let g:ycm_auto_trigger = 1
let g:ycm_show_diagnostics_ui = 0
let g:ycm_goto_buffer_command = 'new-tab'
map <C-]> :YcmCompleter GoTo<CR>
" autocmd FileType javascript map <C-]> :YcmCompleter GoTo<CR>

noremap <F3> :Autoformat<CR>
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0

" Nerdtree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" Syntastic
let g:syntastic_check_on_wq = 1 " check when write file if mode active
"let g:syntastic_mode_map = { "mode": "passive" }
let g:syntastic_javascript_checkers = ['standard']
map <C-l> :SyntasticCheck<cr>
map <f2> :SyntasticReset<cr>

let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes':[],'passive_filetypes': [] }
nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>
let g:syntastic_disabled_filetypes=['c']
let g:syntastic_disabled_filetypes=['cpp']
let g:syntastic_disabled_filetypes=['py']

" Force indentation styles for this directory
autocmd FileType python set shiftwidth=2
autocmd FileType python set tabstop=2
autocmd FileType python set softtabstop=2
autocmd FileType javascript noremap <buffer>  <c-f> :Esformatter<cr>
autocmd FileType c noremap <buffer>  <c-f> :Autoformat<cr>
autocmd FileType cpp noremap <buffer>  <c-f> :Autoformat<cr>
autocmd FileType java noremap <buffer>  <c-f> :Autoformat<cr>
autocmd FileType go noremap <buffer>  <c-f> :GoFmt<cr>
autocmd FileType json noremap <buffer>  <c-f> :Autoformat<cr>
autocmd FileType python noremap <buffer>  <c-f> :Autoformat<cr>
autocmd FileType html noremap <buffer>  <c-f> :Autoformat<cr>

" Go Auto Complete Lib
let g:go_fmt_autosave = 0
let g:go_fmt_command = "goimports"


" Auto Close Bracket

"ino " ""<left>
"ino ' ''<left>
"ino ( ()<left>
"ino [ []<left>
"ino { {}<left>
"ino {<CR> {<CR>}<ESC>O
"ino {;<CR> {<CR>};<ESC>O
